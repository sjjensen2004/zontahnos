services:
  vault:
    image: hashicorp/vault:latest
    container_name: vault
    restart: unless-stopped
    ports:
      - "8200:8200"
    cap_add:
      - IPC_LOCK  # Required to enable in-memory encryption
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_DEV_ROOT_TOKEN_ID}
      - VAULT_ADDR=${VAULT_ADDR}
      - VAULT_API_ADDR=${VAULT_API_ADDR}
      - VAULT_LOG_LEVEL=${VAULT_LOG_LEVEL}
      - VAULT_UI=${VAULT_UI}
    entrypoint: vault server -dev -dev-root-token-id=${VAULT_DEV_ROOT_TOKEN_ID} -dev-listen-address=0.0.0.0:8200
    volumes:
      - dev-vault-data:/vault/data
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - dev-postgres-data:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      - postgres

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"  # Grafana UI
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - dev-grafana-data:/var/lib/grafana
    depends_on:
      - influxdb2
      - vault
    restart: unless-stopped
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    environment:
      - PORT=8080
    ports:
      - 8080:8080
    tty: true
    stdin_open: true
    # command: uvicorn main:app --reload --host 0.0.0.0 --port 8080
    volumes:
      - ./backend/app/app:/app/app
    depends_on:
      postgres:
        condition: service_healthy
  influxdb2:
    image: influxdb:2
    ports:
      - 8086:8086 # InfluxDB UI
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_USERNAME}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_TOKEN}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_INIT_ORG}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_INIT_BUCKET}
    volumes:
      - dev-influxdb2-data:/var/lib/influxdb2
      - dev-influxdb2-config:/etc/influxdb2
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    environment:
      - NEXT_PUBLIC_API_URL=http://api:8080
    ports:
      - 3001:3000
    volumes:
      - ./frontend/app:/app
    command: sh -c "npm install && npm run dev"
    depends_on:
      - api

volumes:
  dev-influxdb2-data:
  dev-influxdb2-config:
  dev-grafana-data:
  dev-vault-data:
  dev-postgres-data: